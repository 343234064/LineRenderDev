// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct AdjFace
{
    uint x;
    uint y;
    uint z;
    uint xy;
    uint yz;
    uint zx;
};

struct Line3D
{
    float3 point3d[2];
};

cbuffer Constants
{
    uint TotalAdjacencyTrianglesNum;
    uint SilhouetteEnable;
    uint CreaseEnable;
    uint BorderEnable;
    uint HideBackFaceEdge;

};


StructuredBuffer<float3> Vertices;
StructuredBuffer<AdjFace> AdjacencyTriangles;

AppendStructuredBuffer<Line3D> Output3DLines;

uniform float3 LocalSpaceViewPosition;
uniform float CreaseAngleThreshold;




float3 ComputeNormal(float3 p1, float3 p2, float3 p3)
{
    float3 U = p2 - p1;
    float3 V = p3 - p1;

    float3 Normal = float3(0.0f, 0.0f, 0.0f);
    /*
    Normal.x = U.y * V.z - U.z * V.y;
    Normal.y = U.z * V.x - U.x * V.z;
    Normal.z = U.x * V.y - U.y * V.x;
    */
    Normal = cross(U, V);
    // No need to normalize
    //Normal = normalize(Normal);

    return Normal;
}



inline bool IsSilhouette(float DotFactor1, float DotFactor2)
{
    return step(DotFactor1 * DotFactor2, 0);
}

inline bool IsCrease(float3 Face1Normal, float3 Face2Normal, float AngleThreshold)
{
    /// a dot b / (|a| * |b|) <= cos(theta)
    return step(dot(Face1Normal, Face2Normal) / length(Face2Normal), AngleThreshold);

}



[numthreads(256, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= TotalAdjacencyTrianglesNum) return;

    AdjFace CurrentFace = AdjacencyTriangles[id.x];

    float3 VertexX = Vertices[CurrentFace.x];
    float3 VertexY = Vertices[CurrentFace.y];
    float3 VertexZ = Vertices[CurrentFace.z];

    bool AddXY = false;
    bool AddYZ = false;
    bool AddZX = false;

    bool XYIsBackFace = false;
    bool ZXIsBackFace = false;
    bool YZIsBackFace = false;

    float3 CurrentFaceNormal = ComputeNormal(VertexX, VertexY, VertexZ);

    bool NeedExtractSilhouette =  SilhouetteEnable > 0;
    float3 LocalViewVector = LocalSpaceViewPosition.xyz - (VertexX+VertexY+VertexZ)/3.0f;
    float SilhouettePremultiplyDotFactor = dot(CurrentFaceNormal, LocalViewVector);

    bool NeedExtractCrease = CreaseEnable > 0;
    float CreasePremultiplyAngleThreshold = length(CurrentFaceNormal) * (cos(CreaseAngleThreshold) + 0.000001f); //+1.0e-6 for Epsilon

    bool CurrentIsBackFace = (SilhouettePremultiplyDotFactor < 0 && HideBackFaceEdge > 0)? true : false;

    if (CurrentFace.xy >= 1)
    {
        float3 AdjVertexXY = Vertices[CurrentFace.xy - 1];
        float3 AdjFaceXYNormal = ComputeNormal(VertexY, VertexX, AdjVertexXY);

        float DotFactor = dot(LocalViewVector, AdjFaceXYNormal);
        AddXY = AddXY || (NeedExtractSilhouette && IsSilhouette(SilhouettePremultiplyDotFactor, DotFactor));
        AddXY = AddXY || (NeedExtractCrease && IsCrease(CurrentFaceNormal, AdjFaceXYNormal, CreasePremultiplyAngleThreshold));

        XYIsBackFace = DotFactor < 0 ? true : false;

        if (AddXY && !(CurrentIsBackFace && XYIsBackFace))
        {
            Line3D Line;
            Line.point3d[0] = Vertices[CurrentFace.x];
            Line.point3d[1] = Vertices[CurrentFace.y];
            Output3DLines.Append(Line);
        }
    }

    if (CurrentFace.zx >= 1)
    {
        float3 AdjVertexZX = Vertices[CurrentFace.zx - 1];
        float3 AdjFaceZXNormal = ComputeNormal(VertexZ, AdjVertexZX, VertexX);

        float DotFactor = dot(LocalViewVector, AdjFaceZXNormal);
        AddZX = AddZX || (NeedExtractSilhouette && IsSilhouette(SilhouettePremultiplyDotFactor, DotFactor));
        AddZX = AddZX || (NeedExtractCrease && IsCrease(CurrentFaceNormal, AdjFaceZXNormal, CreasePremultiplyAngleThreshold));

        ZXIsBackFace = DotFactor < 0 ? true : false;

        if (AddZX && !(CurrentIsBackFace && ZXIsBackFace))
        {
            Line3D Line;
            Line.point3d[0] = Vertices[CurrentFace.z];
            Line.point3d[1] = Vertices[CurrentFace.x];
            Output3DLines.Append(Line);
        }
    }

    if (CurrentFace.yz >= 1)
    {
        float3 AdjVertexYZ = Vertices[CurrentFace.yz - 1];
        float3 AdjFaceYZNormal = ComputeNormal(AdjVertexYZ, VertexZ, VertexY);

        float DotFactor = dot(LocalViewVector, AdjFaceYZNormal);
        AddYZ = AddYZ || (NeedExtractSilhouette && IsSilhouette(SilhouettePremultiplyDotFactor, DotFactor));
        AddYZ = AddYZ || (NeedExtractCrease && IsCrease(CurrentFaceNormal, AdjFaceYZNormal, CreasePremultiplyAngleThreshold));

        YZIsBackFace = DotFactor < 0 ? true : false;

        if (AddYZ && !(CurrentIsBackFace && YZIsBackFace))
        {
            Line3D Line;
            Line.point3d[0] = Vertices[CurrentFace.y];
            Line.point3d[1] = Vertices[CurrentFace.z];
            Output3DLines.Append(Line);
        }
    }

}
