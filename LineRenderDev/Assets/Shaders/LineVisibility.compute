// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Common.cginc"


StructuredBuffer<LineSegment> Input3DLines;
//AppendStructuredBuffer<LineSegment> Output2DLines;

Texture2D<float> SceneDepthTexture;
SamplerState LinearClampSampler;




inline bool ZTest(float PositionDepth, float SceneDepth)
{
#if REVERSED_Z
    return (PositionDepth >= SceneDepth) ? true : false;
#else
    return (PositionDepth <= SceneDepth) ? true : false;
#endif
}


[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    LineSegment InputLine = Input3DLines[id.x];

    float3 ScreenPosition1 = ComputeScreenPosition(InputLine.NDCPosition[0]);
    float3 ScreenPosition2 = ComputeScreenPosition(InputLine.NDCPosition[1]);

    float Position1SceneDepth = (SceneDepthTexture.SampleLevel(LinearClampSampler, ScreenPosition1.xy, 0).r);
    float Position2SceneDepth = (SceneDepthTexture.SampleLevel(LinearClampSampler, ScreenPosition2.xy, 0).r);

    /*
    if(ZTest(ScreenPosition1.z, Position1SceneDepth) && ZTest(ScreenPosition2.z, Position2SceneDepth))
    { 
        LineSegment OutputLine;
        OutputLine.point2d[0] = InputLine.LocalPosition[0];
        OutputLine.point2d[1] = InputLine.LocalPosition[1];
        Output2DLines.Append(OutputLine);
    }
    */
}
