// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Visibility

#include "Common.cginc"


#define SEGMENT_SIZE ArgBuffer[0]
StructuredBuffer<LineSegment> Segments;
StructuredBuffer<Slice> Slices;
StructuredBuffer<uint> ArgBuffer;  
AppendStructuredBuffer<PlainLine> VisibleLines;

Texture2D<float> SceneDepthTexture;
SamplerState LinearClampSampler;

uniform float4  ScreenScaledResolution;

/*
* Groupshared memory is limited to 16KB per group.
* A single thread is limited to a 256 byte region of groupshared memory for writing.
* 16 bytes * 64 + 4 bytes * 2 = 1024 bytes + 8 bytes
*/
groupshared float4 PointCache[VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM];
groupshared uint VisibilityCache[VISIBILITY_CACHE_NUM];





void SaveVisibility(bool Visibility, uint Index, bool Valid)
{
    uint CacheIndex = Index >> 5;
    uint Offset = Index - 32 * CacheIndex;

    /*
    * | <------------  | | <------------  | 
    */
    uint Mask = (1 << Offset);
    if (Visibility && Valid)
        InterlockedOr(VisibilityCache[CacheIndex], Mask);
    else
        InterlockedAnd(VisibilityCache[CacheIndex], ~Mask);
}

bool LoadVisibility(uint Index)
{
    uint CacheIndex = Index >> 5;
    uint Offset = Index - 32 * CacheIndex;

    /*
    * | <------------  | | <------------  |
    */
    uint Mask = 1 << Offset;
    uint Cache = VisibilityCache[CacheIndex];
    return (Cache & Mask) > 0;
}

inline void SavePoint(float4 Point, uint Index, bool Valid)
{
    float4 ToSave = Valid ? Point : float4(-5.0f, 0.0f, 0.0f, 0.0f);//-5.0 is impossible in NDC Space
    PointCache[Index] = ToSave;
}

inline float4 LoadPoint(uint Index)
{
    return PointCache[Index];
}


int FirstBitZeroLow(uint Src, uint StartIndexFromLow)
{
    uint Length = 32 - StartIndexFromLow;//firstbithigh(Src) + 1 - StartIndexFromLow;
    uint SrcWithOffset = Src >> StartIndexFromLow;

    //if (SrcWithOffset == uint(0)) return StartIndexFromLow;
    //if (SrcWithOffset == uint(4294967295)) return -1;

    uint PosFromStartIndex = firstbitlow(~SrcWithOffset); // return #ffffffff(4294967295) if failed

    //PosFromStartIndex = min(PosFromStartIndex, MaxSearchLength);
    return PosFromStartIndex < Length ? (PosFromStartIndex + StartIndexFromLow) : -1;
}


int2 ExtractLatestZeroBit(uint HeadIndex, uint MaxSearchLength)
{
    uint CacheIndex = HeadIndex >> 5;
    uint HeadOffset = HeadIndex - 32 * CacheIndex;
    uint Cache = VisibilityCache[CacheIndex];

    //change this if VISIBILITY_CACHE_NUM change
    //only 2 step(64 size) to avoid writing loop 
    int Pos = FirstBitZeroLow(Cache, HeadOffset);
    if (Pos < 0 && CacheIndex < 1)
    {
        CacheIndex += 1;
        HeadOffset = 0;
        Cache = VisibilityCache[CacheIndex];
        Pos = FirstBitZeroLow(Cache, HeadOffset);
    }
    /*
    [unroll]
    while (CacheIndex < VISIBILITY_CACHE_NUM)
    {
        int Pos = FirstBitZeroLow(Cache, HeadOffset);
        if (Pos >= 0) break;

        HeadOffset = 0;
        CacheIndex += 1;
        Cache = VisibilityCache[CacheIndex];
    };*/

    int2 Result = (Pos >= 0) ? int2(Pos + CacheIndex * 32, 1) : int2(SLICE_PIXEL_SIZE - 1, 0);
    Result = (Result.x - HeadIndex > MaxSearchLength) ? int2(HeadIndex + MaxSearchLength, 0) : Result;
    return  Result;
}
  

float SampleSceneDepth(float2 uv)
{
    float2 TexelSize = ScreenScaledResolution.zw;
    /*
    float2 Offset1 = float2(1.3846153846f, 0);
    float2 Offset2 = float2(3.2307692308f, 0);
    
    float S0 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv, 0).r * 0.2270270270f;
    S0 += SceneDepthTexture.SampleLevel(LinearClampSampler, uv + (Offset1 * TexelSize), 0).r * 0.3162162162f;
    S0 += SceneDepthTexture.SampleLevel(LinearClampSampler, uv - (Offset1 * TexelSize), 0).r * 0.3162162162f;
    S0 += SceneDepthTexture.SampleLevel(LinearClampSampler, uv + (Offset2 * TexelSize), 0).r * 0.0702702703f;
    S0 += SceneDepthTexture.SampleLevel(LinearClampSampler, uv - (Offset2 * TexelSize), 0).r * 0.0702702703f;
    
    return S0;
    */
    float S0 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv, 0).r;
    float S1 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(TexelSize.x, 0.0f), 0).r;
    float S2 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(0.0f, TexelSize.y), 0).r;
    float S3 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(-TexelSize.x, 0.0f), 0).r;
    float S4 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(0.0f, -TexelSize.y), 0).r;
    return S0 * 0.5f + (S1 + S2 + S3 + S4) * 0.125f;
    
}



uint2 CalculatePixelPosition(uint PixelLength, uint CurrentSegmentLengthShrinkTotalInSlice, uint CurrentSegmentLengthShrink, uint BeginIndexInCurrentSegmentShrink, uint CurrentGroupIndex)
{
    uint TotalLengthExclusive = CurrentSegmentLengthShrinkTotalInSlice - CurrentSegmentLengthShrink;
    uint Offset = max(0, CurrentGroupIndex - TotalLengthExclusive);

    uint PixelPositionShrink = BeginIndexInCurrentSegmentShrink + Offset;

    uint PixelPosition = max(1, PixelPositionShrink * 2 - 1);
    PixelPosition = min(PixelPosition, PixelLength);

    return uint2(PixelPosition, PixelPositionShrink);
}


/*
* 改成相隔2个像素点检测深度
*
* 1.测试当前点可见性
* 2.存到groupshared数据中临时保存
* 3.GroupMemoryBarrierWithGroupSync();
* 4.如果当前点可见并且为线段开头，则当前点是某一段开头
* 5.如果当前点可见并且为线段结尾，则当前点是某一段结尾
* 6.以上都不是，查询左边一点可见性
* 7.如果左边不可见，则当前点是某一段开头
* 8.如果左边可见，则当前点是在某一段内部
* 9.查询右边边一点可见性2
* 10.如果右边不可见，则当前点是某一段结尾
* 11.如果右边可见，则当前点是某一段内部
* 12.如果左右两边同时不可见，则当前点当作不可见(pixel size >= 2)
* 13.如果当前是开头，执行线段挤出
* 14.计算开头屏幕坐标
* 15.可见性变量左移是的当前点为第一位
* 16.用01111111的方式获取除第一位的后续所有可见性变量
* 17.用exp2、log2或firstbithigh获取离当前最近的可见点，此为该段结尾，并计算结尾屏幕坐标
* 18.输出该可见线段
*/
/*
* 问题点：
* 1.需考虑单像素，摄像机越远，线段越小基本变成单像素大小
* 2.CurrentGroupPixelPosition处于边界时：
* a.线段边界
* b.slice边界
* c.线程边界
* 3.ExtractTailIndex需要考虑合理的边界位置:
* a.线段边界
* b.slice边界
* 4.TargetPixelPosition范围[0  ~ PixelLength], 至少01两个点
* 5.重复线段(暂不处理)
* 
*/
[numthreads(VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM, 1, 1)]
void Visibility(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    uint ri = gi % VISIBILITY_CACHE_NUM;
    VisibilityCache[ri] = 0;
    GroupMemoryBarrierWithGroupSync();

    uint CurrentSliceIndex = gid.x;
    uint CurrentGroupPixelPosition = gi;
    
    Slice CurrentSlice = Slices[CurrentSliceIndex];
    LineSegment BeginSegment = Segments[CurrentSlice.BeginSegmentIndex];
    uint BeginPixelShrink = CurrentSlice.BeginPixel;
    uint BeginSegmentID = CurrentSlice.BeginSegmentIndex;
    uint SegmentBufferSize = SEGMENT_SIZE;

    
    bool ValidPoint = false;
    uint LengthFromBegin = 0;
    uint RemainingSegmentLength = BeginSegment.PixelLengthShrink - BeginPixelShrink + 1;
    for (int i = 0; i < SLICE_PIXEL_SIZE; i++)
    {
        LengthFromBegin += RemainingSegmentLength;
        if (CurrentGroupPixelPosition < LengthFromBegin)
        {
            ValidPoint = true;
            break;
        }
        BeginSegmentID += 1;
        if (BeginSegmentID >= SegmentBufferSize)
        {
            BeginSegmentID -= 1;
            break;
        }         
        RemainingSegmentLength = Segments[BeginSegmentID].PixelLengthShrink;
        BeginPixelShrink = 1;//BeginPixelShrink start from 1
    }

    LineSegment TargetSegment = Segments[BeginSegmentID];
    uint2 PixelPosition = CalculatePixelPosition(TargetSegment.PixelLength, LengthFromBegin, RemainingSegmentLength, BeginPixelShrink, CurrentGroupPixelPosition);
    uint TargetPixelPosition = PixelPosition.x;
    uint TargetPixelPositionShrink = PixelPosition.y;

    float4 ClipPosition1 = TargetSegment.ClipPosition[0];
    float4 ClipPosition2 = TargetSegment.ClipPosition[1];
    float2 NDCPosition1 = TargetSegment.NDCPosition[0].xy;
    float2 NDCPosition2 = TargetSegment.NDCPosition[1].xy;

    float InvPixelLength = 1.0f / (float)TargetSegment.PixelLength;
    float TProjectedCenter = saturate(((float)TargetPixelPosition - 0.5f) * InvPixelLength);
    float TProjectedStart = saturate(((float)TargetPixelPosition - 1.0f) * InvPixelLength);
    float TProjectedEndOffset = ((CurrentGroupPixelPosition == (SLICE_PIXEL_SIZE - 1)) ? 1.0f : 0.0f); //1-pixel gap left between slices
    float TProjectedEnd= saturate(((float)TargetPixelPosition + TProjectedEndOffset) * InvPixelLength);

    float TUnProject = (TProjectedCenter * TargetSegment.ClipPosition[0].w) / ((1.0f - TProjectedCenter) * TargetSegment.ClipPosition[1].w + TProjectedCenter * TargetSegment.ClipPosition[1].w);
    
    float2 SamplePositionProjected = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedCenter;
    float4 SamplePositionUnProject = ClipPosition1 + (ClipPosition2 - ClipPosition1) * TUnProject; //Clip space before perspective division

    float SamplePositionProjectedZ = GetUnifyNDCZ(SamplePositionUnProject.z / SamplePositionUnProject.w);
    float SceneDepth = SampleSceneDepth(SamplePositionProjected.xy);

    bool NeedHideOccludedEdge = HideOccludedEdge > 0;
    bool NeedHideBackFace = HideBackFaceEdge > 0;
    bool IsBackFacing = TargetSegment.BackFacing > 0;
    bool IsOccluded = ZTest(SamplePositionProjectedZ, SceneDepth);
    bool IsVisible = (NeedHideOccludedEdge ^ NeedHideBackFace) ?
       ((NeedHideOccludedEdge && !NeedHideBackFace) ? (IsBackFacing ? true : IsOccluded) : (IsBackFacing ? IsOccluded : true))
        :
       (NeedHideOccludedEdge ? IsOccluded : true);


    float2 SamplePositionProjectedStart = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedStart;
    float2 SamplePositionProjectedEnd = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedEnd;
    float4 CurrentPoint = float4(SamplePositionProjectedStart, SamplePositionProjectedEnd);

    SavePoint(CurrentPoint, CurrentGroupPixelPosition, ValidPoint);
    SaveVisibility(IsVisible, CurrentGroupPixelPosition, ValidPoint);
    GroupMemoryBarrierWithGroupSync();


    bool Left = (CurrentGroupPixelPosition > 0) && (TargetPixelPosition > 1) && LoadVisibility(CurrentGroupPixelPosition - 1);
    bool Right = (CurrentGroupPixelPosition < (VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM - 1)) && (TargetPixelPosition < TargetSegment.PixelLength) && LoadVisibility(CurrentGroupPixelPosition + 1);

    bool IsHead = !Left ;
    bool IsTail = !Right;

    //考虑只有一个像素长度的线段
    //1.MaxSearchLength
    //2.ExtractTailIndex返回的是最近的0所在的位置
    //3.当所有的像素小于1长度时，1111111111111111这种的情况要考虑线段位置截断，即MaxSearchLength的限制
    //4.当只有1个像素时，LoadPoint获得的将是同一个点，该如何处理
    
    if (IsVisible && IsHead && ValidPoint)
    {
        uint MaxSearchLength = max(0, TargetSegment.PixelLengthShrink - TargetPixelPositionShrink);//计算shrink后的剩余像素
        int2 ZeroBitIndex = ExtractLatestZeroBit(CurrentGroupPixelPosition, MaxSearchLength);
        int TailIndex = ZeroBitIndex.x - ZeroBitIndex.y;

        float4 Head = CurrentPoint;
        float4 Tail = LoadPoint(TailIndex);
        if (Tail.x >= -1.0f) {
            PlainLine NewLine;
            NewLine.NDCPosition[0] = Head.xy;
            NewLine.NDCPosition[1] = Tail.zw;
            NewLine.BackFacing = TargetSegment.BackFacing;
            NewLine.debug = BeginSegmentID;
            NewLine.debug2 = TargetSegment.PixelLength;
            NewLine.SliceIndex = gid.x;
            VisibleLines.Append(NewLine);
        }
        
    }
    /*
    bool vis = LoadVisibility(CurrentGroupPixelPosition);
    float4 p = LoadPoint(CurrentGroupPixelPosition);
    if (p.x >= -1.0f ) {
        PlainLine NewLine;
        NewLine.NDCPosition[0] = p.xy;
        NewLine.NDCPosition[0] = p.xy;
        NewLine.NDCPosition[1] = p.zw;// float2(p.xy + normalize(NDCPosition2 - NDCPosition1) * 0.001);
        // if (IsTail) NewLine.NDCPosition[1] = float3(p.xy + normalize(NDCPosition1 - NDCPosition2) * 0.011, p.z);
        // else if (IsHead) NewLine.NDCPosition[1] = float3(p.xy + normalize(NDCPosition2 - NDCPosition1) * 0.011, p.z);
        NewLine.BackFacing = CurrentSlice.BeginPixel;
        NewLine.debug = CurrentSlice.BeginSegmentIndex;
        NewLine.debug2 = TargetSegment.PixelLength;
        NewLine.SliceIndex = CurrentSliceIndex;// CurrentGroupPixelPosition;//gid.x;
        //if (CurrentGroupPixelPosition % 2 == 0 && IsVisible)

        VisibleLines.Append(NewLine);
    }
     */
}

/*
[numthreads(1, 1, 1)]
void Visibility(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex, uint3 id : SV_DispatchThreadID)
{


LineSegment InputLine = Segments[id.x];

float4 ScreenPosition1 = (InputLine.NDCPosition[0]);
float4 ScreenPosition2 = (InputLine.NDCPosition[1]);

float Position1SceneDepth = (SceneDepthTexture.SampleLevel(LinearClampSampler, ScreenPosition1.xy, 0).r);
float Position2SceneDepth = (SceneDepthTexture.SampleLevel(LinearClampSampler, ScreenPosition2.xy, 0).r);


//if(ZTest(ScreenPosition1.z, Position1SceneDepth) && ZTest(ScreenPosition2.z, Position2SceneDepth))
{
    PlainLine NewLine;
    NewLine.NDCPosition[0] = InputLine.NDCPosition[0];
    NewLine.NDCPosition[1] = InputLine.NDCPosition[1];
    NewLine.BackFacing = InputLine.BackFacing;
    NewLine.SliceIndex = 1;
    NewLine.debug = 0.0f;
    NewLine.debug2 = 0.0f;
    VisibleLines.Append(NewLine); 
}



}
*/