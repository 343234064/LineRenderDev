// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Visibility


#pragma multi_compile __ ENABLE_DEBUG_VIEW
#include "Common.cginc"



#define SEGMENT_SIZE RArgBuffer[SLICE_PASS_CONTOUR_COUNT]
#define SLICE_SIZE RArgBuffer[VISIBILITY_PASS_SLICE_COUNT]

StructuredBuffer<uint> RArgBuffer;
StructuredBuffer<SegmentMetaData> VisibleSegmentBuffer;
StructuredBuffer<Slice> SliceBuffer;
RWStructuredBuffer<uint> WArgBuffer;
RWStructuredBuffer<Segment> AllSegmentBuffer;
RWStructuredBuffer<AnchorVertex> AnchorVertexBuffer;
RWStructuredBuffer<AnchorEdge> AnchorEdgeBuffer;
RWStructuredBuffer<AnchorSlice> AnchorSliceBuffer;

Texture2D<float> SceneDepthTexture;
SamplerState LinearClampSampler;

uniform float4  ScreenScaledResolution;

/*
* Groupshared memory is limited to 16KB per group.
* A single thread is limited to a 256 byte region of groupshared memory for writing.
* 16 bytes * 64 + 16 bytes * 64 + 4 bytes * 2 = 1024 bytes + 1024 bytes + 8 bytes
*/
groupshared float4 PointCache[VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM];
groupshared uint4 ExtraCache[VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM];
groupshared uint VisibilityCache[VISIBILITY_CACHE_NUM];

#if ENABLE_DEBUG_VIEW
groupshared float4 DebugPosCache[VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM];
inline void SaveDebugPos(float4 DebugPos, uint Index)
{
    DebugPosCache[Index] = DebugPos;
}
inline float4 LoadDebugPos(uint Index)
{
    return DebugPosCache[Index];
}
#endif

void SaveVisibility(bool Visibility, uint Index, bool Valid)
{
    uint CacheIndex = Index >> 5;
    uint Offset = Index - 32 * CacheIndex;

    /*
    * | <------------  | | <------------  | 
    */
    uint Mask = (1 << Offset);
    if (Visibility && Valid)
        InterlockedOr(VisibilityCache[CacheIndex], Mask);
    else
        InterlockedAnd(VisibilityCache[CacheIndex], ~Mask);
}

bool LoadVisibility(uint Index)
{
    uint CacheIndex = Index >> 5;
    uint Offset = Index - 32 * CacheIndex;

    /*
    * | <------------  | | <------------  |
    */
    uint Mask = 1 << Offset;
    uint Cache = VisibilityCache[CacheIndex];
    return (Cache & Mask) > 0;
}

inline void SavePoint(float4 Point, uint Index, bool Valid)
{
    float4 ToSave = Valid ? Point : float4(-5.0f, -5.0f, -5.0f, -5.0f);//-5.0 is impossible in NDC Space
    PointCache[Index] = ToSave;
}

inline float4 LoadPoint(uint Index)
{
    return PointCache[Index];
}

inline void SaveExtra(uint4 Extra, uint Index, bool Valid)
{
    uint4 ToSave = Valid ? Extra : uint4(0, 0, 0, 0);
    ExtraCache[Index] = ToSave;
}

inline uint4 LoadExtra(uint Index)
{
    return ExtraCache[Index];
}


int FirstBitZeroLow(uint Src, uint StartIndexFromLow)
{
    uint Length = 32 - StartIndexFromLow;//firstbithigh(Src) + 1 - StartIndexFromLow;
    uint SrcWithOffset = Src >> StartIndexFromLow;

    //if (SrcWithOffset == uint(0)) return StartIndexFromLow;
    //if (SrcWithOffset == uint(4294967295)) return -1;

    uint PosFromStartIndex = firstbitlow(~SrcWithOffset); // return #ffffffff(4294967295) if failed

    //PosFromStartIndex = min(PosFromStartIndex, MaxSearchLength);
    return PosFromStartIndex < Length ? (PosFromStartIndex + StartIndexFromLow) : -1;
}

int FirstBitOneLow(uint Src, uint StartIndexFromLow)
{
    uint Length = 32 - StartIndexFromLow;//firstbithigh(Src) + 1 - StartIndexFromLow;
    uint SrcWithOffset = Src >> StartIndexFromLow;

    //if (SrcWithOffset == uint(0)) return StartIndexFromLow;
    //if (SrcWithOffset == uint(4294967295)) return -1;

    uint PosFromStartIndex = firstbitlow(SrcWithOffset); // return #ffffffff(4294967295) if failed

    //PosFromStartIndex = min(PosFromStartIndex, MaxSearchLength);
    return PosFromStartIndex < Length ? (PosFromStartIndex + StartIndexFromLow) : -1;
}



int2 ExtractLatestZeroBit(uint HeadIndex, uint MaxSearchLength)
{
    uint CacheIndex = HeadIndex >> 5;
    uint HeadOffset = HeadIndex - 32 * CacheIndex;
    uint Cache = VisibilityCache[CacheIndex];

    //change this if VISIBILITY_CACHE_NUM change
    //only 2 step(64 size) to avoid writing loop 
    int Pos = FirstBitZeroLow(Cache, HeadOffset);
    if (Pos < 0 && CacheIndex < 1)
    {
        CacheIndex += 1;
        HeadOffset = 0;
        Cache = VisibilityCache[CacheIndex];
        Pos = FirstBitZeroLow(Cache, HeadOffset);
    }
    /*
    [unroll]
    while (CacheIndex < VISIBILITY_CACHE_NUM)
    {
        int Pos = FirstBitZeroLow(Cache, HeadOffset);
        if (Pos >= 0) break;

        HeadOffset = 0;
        CacheIndex += 1;
        Cache = VisibilityCache[CacheIndex];
    };*/

    int2 Result = (Pos >= 0) ? int2(Pos + CacheIndex * 32, 1) : int2(SLICE_PIXEL_SIZE - 1, 0);
    Result = (Result.x - HeadIndex > MaxSearchLength) ? int2(HeadIndex + MaxSearchLength, 0) : Result;
    return  Result;
}
 

int2 ExtractLatestOneBit(uint HeadIndex, uint MaxSearchLength)
{
    uint CacheIndex = HeadIndex >> 5;
    uint HeadOffset = HeadIndex - 32 * CacheIndex;
    uint Cache = VisibilityCache[CacheIndex];

    //change this if VISIBILITY_CACHE_NUM change
    //only 2 step(64 size) to avoid writing loop 
    int Pos = FirstBitOneLow(Cache, HeadOffset);
    if (Pos < 0 && CacheIndex < 1)
    {
        CacheIndex += 1;
        HeadOffset = 0;
        Cache = VisibilityCache[CacheIndex];
        Pos = FirstBitOneLow(Cache, HeadOffset);
    }

    int2 Result = (Pos >= 0) ? int2(Pos + CacheIndex * 32, 1) : int2(SLICE_PIXEL_SIZE - 1, 0);
    Result = (Result.x - HeadIndex > MaxSearchLength) ? int2(HeadIndex + MaxSearchLength, 0) : Result;
    return  Result;
}


float SampleSceneDepth(float2 uv)
{
    
#if 1

    float2 TexelSize = ScreenScaledResolution.zw;
    float S0 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv, 0).r;
    float S1 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(TexelSize.x, 0.0f), 0).r;
    float S2 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(0.0f, TexelSize.y), 0).r;
    float S3 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(-TexelSize.x, 0.0f), 0).r;
    float S4 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(0.0f, -TexelSize.y), 0).r;
    float S5 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(TexelSize.x, TexelSize.y), 0).r;
    float S6 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(-TexelSize.x, -TexelSize.y), 0).r;
    float S7 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(-TexelSize.x, TexelSize.y), 0).r;
    float S8 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv + float2(TexelSize.x, -TexelSize.y), 0).r;
    return (S0+ S1+ S2+ S3+ S4+ S5+ S6+ S7+ S8) * 0.111111111f;

#else

    const float offset = 1.5f;
    float2 TexelPosition = (floor(ScreenScaledResolution.xy * uv) + 0.5f) * ScreenScaledResolution.zw;

    float S0 = SceneDepthTexture.SampleLevel(LinearClampSampler, uv, 0).r;
    float S1 = SceneDepthTexture.SampleLevel(LinearClampSampler, TexelPosition + float2(1.5f, 0.5f) * ScreenScaledResolution.zw, 0).r;
    float S2 = SceneDepthTexture.SampleLevel(LinearClampSampler, TexelPosition + float2(-1.5f, -0.5f) * ScreenScaledResolution.zw, 0).r;
    float S3 = SceneDepthTexture.SampleLevel(LinearClampSampler, TexelPosition + float2(0.5f, -1.5f) * ScreenScaledResolution.zw, 0).r;
    float S4 = SceneDepthTexture.SampleLevel(LinearClampSampler, TexelPosition + float2(-0.5f, 1.5f) * ScreenScaledResolution.zw, 0).r;

    return (S0 + S1 + S2 + S3 + S4) * 0.2f;

#endif

}


uint2 CalculatePixelPosition(uint PixelLength, uint CurrentSegmentLengthShrinkTotalInSlice, uint CurrentSegmentLengthShrink, uint BeginIndexInCurrentSegmentShrink, uint CurrentGroupIndex)
{
    uint TotalLengthExclusive = CurrentSegmentLengthShrinkTotalInSlice - CurrentSegmentLengthShrink;
    uint Offset = max(0, CurrentGroupIndex - TotalLengthExclusive);

    uint PixelPositionShrink = BeginIndexInCurrentSegmentShrink + Offset;

    uint PixelPosition = max(1, PixelPositionShrink * 2 - 1);
    PixelPosition = min(PixelPosition, PixelLength);

    return uint2(PixelPosition, PixelPositionShrink);
}




uint AddAllSegmentBuffer(Segment CurrentSegment)
{
    uint Original = 0;

#if ENABLE_DEBUG_VIEW
    InterlockedAdd(WArgBuffer[INDIRECT_DRAW_TRIANGLE_COUNT], 1, Original);
#else
    InterlockedAdd(WArgBuffer[INDIRECT_DRAW_TRIANGLE_COUNT], 2, Original);
    Original *= 0.5;
#endif 

    AllSegmentBuffer[Original] = CurrentSegment;

    uint Original2 = 0;
    bool AddThreadCount = ((Original + 1) % GENERATE_PASS_PER_THREAD_ELEMENT_NUM == 0);
    InterlockedAdd(WArgBuffer[GENERATE_PASS_DISPATCH_COUNT], AddThreadCount ? 1 : 0, Original2);

    return Original;
}



void WriteSegmentIndexToAnchorCache(uint AnchorType, uint AnchorIndex, uint LineType, uint SegmentId)
{
    uint Original = 0xffffffff;
    if (AnchorType == 2)
    {
        InterlockedCompareExchange(AnchorSliceBuffer[AnchorIndex].AllType.x, 0xffffffff, SegmentId, Original);
        if (Original != 0xffffffff)
            InterlockedCompareExchange(AnchorSliceBuffer[AnchorIndex].AllType.y, 0xffffffff, SegmentId, Original);
    }
    else if (AnchorType == 1)
    {
        if (LineType == CONTOUR_FACE_TYPE) {
            InterlockedCompareExchange(AnchorEdgeBuffer[AnchorIndex].ContourType.y, 0xffffffff, SegmentId, Original);
            if (Original != 0xffffffff)
                InterlockedCompareExchange(AnchorEdgeBuffer[AnchorIndex].ContourType.z, 0xffffffff, SegmentId, Original);
        }
        else if (LineType == CONTOUR_EDGE_TYPE)
        {
            InterlockedCompareExchange(AnchorVertexBuffer[AnchorIndex].ContourType.y, 0xffffffff, SegmentId, Original);
            if (Original != 0xffffffff)
                InterlockedCompareExchange(AnchorVertexBuffer[AnchorIndex].ContourType.z, 0xffffffff, SegmentId, Original);
        }
        else if (LineType == CREASE_EDGE_TYPE)
        {
            InterlockedCompareExchange(AnchorVertexBuffer[AnchorIndex].CreaseType.y, 0xffffffff, SegmentId, Original);
            if (Original != 0xffffffff)
                InterlockedCompareExchange(AnchorVertexBuffer[AnchorIndex].CreaseType.z, 0xffffffff, SegmentId, Original);
        }
    }
}


/*
* 改成相隔2个像素点检测深度
*
* 1.测试当前点可见性
* 2.存到groupshared数据中临时保存
* 3.GroupMemoryBarrierWithGroupSync();
* 4.如果当前点可见并且为线段开头，则当前点是某一段开头
* 5.如果当前点可见并且为线段结尾，则当前点是某一段结尾
* 6.以上都不是，查询左边一点可见性
* 7.如果左边不可见，则当前点是某一段开头
* 8.如果左边可见，则当前点是在某一段内部
* 9.查询右边边一点可见性2
* 10.如果右边不可见，则当前点是某一段结尾
* 11.如果右边可见，则当前点是某一段内部
* 12.如果左右两边同时不可见，则当前点当作不可见(pixel size >= 2)
* 13.如果当前是开头，执行线段挤出
* 14.计算开头屏幕坐标
* 15.可见性变量左移是的当前点为第一位
* 16.用01111111的方式获取除第一位的后续所有可见性变量
* 17.用exp2、log2或firstbithigh获取离当前最近的可见点，此为该段结尾，并计算结尾屏幕坐标
* 18.输出该可见线段
*/

[numthreads(VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM, 1, 1)]
void Visibility(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    uint ri = gi % VISIBILITY_CACHE_NUM;
    VisibilityCache[ri] = 0;
    GroupMemoryBarrierWithGroupSync();

    uint CurrentSliceIndex = gid.x;
    uint CurrentGroupPixelPosition = gi;
    
    if (CurrentSliceIndex >= SLICE_SIZE) return;

    Slice CurrentSlice = SliceBuffer[CurrentSliceIndex];
    SegmentMetaData BeginSegment = VisibleSegmentBuffer[CurrentSlice.BeginSegmentIndex];
    uint BeginPixelShrink = CurrentSlice.BeginPixel;
    uint BeginSegmentID = CurrentSlice.BeginSegmentIndex;
    uint SegmentBufferSize = SEGMENT_SIZE;

    
    bool ValidPoint = false;
    uint LengthFromBegin = 0;
    uint RemainingSegmentLength = BeginSegment.PixelLengthShrink - BeginPixelShrink + 1;
    for (int i = 0; i < SLICE_PIXEL_SIZE; i++)
    {
        LengthFromBegin += RemainingSegmentLength;
        if (CurrentGroupPixelPosition < LengthFromBegin)
        {
            ValidPoint = true;
            break;
        }
        BeginSegmentID += 1;
        if (BeginSegmentID >= SegmentBufferSize)
        {
            BeginSegmentID -= 1;
            break;
        }         
        RemainingSegmentLength = VisibleSegmentBuffer[BeginSegmentID].PixelLengthShrink;
        BeginPixelShrink = 1;//BeginPixelShrink start from 1
    }

    SegmentMetaData TargetSegment = VisibleSegmentBuffer[BeginSegmentID];

    uint2 PixelPosition = CalculatePixelPosition(TargetSegment.PixelLength, LengthFromBegin, RemainingSegmentLength, BeginPixelShrink, CurrentGroupPixelPosition);
    uint TargetPixelPosition = PixelPosition.x; //Range : [1 ~ PixelLength]
    uint TargetPixelPositionShrink = PixelPosition.y;

    float4 ClipPosition1 = TargetSegment.NDCPosition[0];// zw = ClipPosition.zw
    float4 ClipPosition2 = TargetSegment.NDCPosition[1];// zw = ClipPosition.zw
    float2 NDCPosition1 = TargetSegment.NDCPosition[0].xy;
    float2 NDCPosition2 = TargetSegment.NDCPosition[1].xy;

    float InvPixelLength = 1.0f / (float)TargetSegment.PixelLength;
    float TProjectedCenter = saturate(((float)TargetPixelPosition - 0.5f) * InvPixelLength);
    float TProjectedStart = saturate(((float)TargetPixelPosition - 1.0f) * InvPixelLength);
    float TProjectedEndOffset = ((CurrentGroupPixelPosition == (SLICE_PIXEL_SIZE - 1)) ? 1.0f : 0.0f); //1-pixel gap left between slices
    float TProjectedEnd= saturate(((float)TargetPixelPosition + TProjectedEndOffset) * InvPixelLength); 

    float TUnProject = (TProjectedCenter * ClipPosition1.w) / (ClipPosition2.w);
        //((1.0f - TProjectedCenter) * TargetSegment.ClipPosition[1].w + TProjectedCenter * TargetSegment.ClipPosition[1].w);
    
    float2 SamplePositionProjected = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedCenter;
    float4 SamplePositionUnProject = ClipPosition1 + (ClipPosition2 - ClipPosition1) * TUnProject; //Clip space before perspective division

    float InvertW = 1.0f / SamplePositionUnProject.w;
    float SamplePositionProjectedZ = GetUnifyNDCZ(SamplePositionUnProject.z * InvertW);
    float SceneDepth = SampleSceneDepth(SamplePositionProjected.xy);

    bool NeedShowVisible = HideVisibleEdge == 0;
    bool NeedHideOccludedEdge = HideOccludedEdge > 0;
    bool NeedHideBackFace = HideBackFaceEdge > 0;
    
    bool NotOccluded = ZTest(SamplePositionProjectedZ, InvertW, SceneDepth);
    bool IsVisible = NotOccluded;// && !IsBackFacing;
    TargetSegment.Type = IsVisible ? (SET_LINE_IS_BACKFACING(TargetSegment.Type, false)) : TargetSegment.Type;//if ztest is true, this should not be backfacing
    
    bool IsBackFacing = GET_LINE_IS_BACKFACING(TargetSegment.Type);
    bool NeedShowUnvisible = (NeedHideOccludedEdge ^ NeedHideBackFace) ?
       ((NeedHideOccludedEdge && !NeedHideBackFace) ? (IsBackFacing ? true : false) : (IsBackFacing ? false : true))
        :
       (NeedHideOccludedEdge ? false : true);

    float2 SamplePositionProjectedStart = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedStart;
    float2 SamplePositionProjectedEnd = NDCPosition1 + (NDCPosition2 - NDCPosition1) * TProjectedEnd;
    float4 CurrentPoint = float4(SamplePositionProjectedStart, SamplePositionProjectedEnd);

#if ENABLE_DEBUG_VIEW
    float4 DebugPosStart = TargetSegment.NDCPositionForDebug[0] + (TargetSegment.NDCPositionForDebug[1] - TargetSegment.NDCPositionForDebug[0]) * TProjectedStart;
    float4 DebugPosEnd = TargetSegment.NDCPositionForDebug[0] + (TargetSegment.NDCPositionForDebug[1] - TargetSegment.NDCPositionForDebug[0]) * TProjectedEnd;
    SaveDebugPos(DebugPosEnd, CurrentGroupPixelPosition);
#endif

    SavePoint(CurrentPoint, CurrentGroupPixelPosition, ValidPoint);
    SaveExtra(uint4(TargetPixelPosition, CurrentGroupPixelPosition, 0, 0), CurrentGroupPixelPosition, ValidPoint);
    SaveVisibility(IsVisible, CurrentGroupPixelPosition, ValidPoint);
    GroupMemoryBarrierWithGroupSync();


    bool Left = (CurrentGroupPixelPosition > 0) && (TargetPixelPosition > 1) && LoadVisibility(CurrentGroupPixelPosition - 1);
    //bool Right = (CurrentGroupPixelPosition < (VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM - 1)) && (TargetPixelPosition < TargetSegment.PixelLength) && LoadVisibility(CurrentGroupPixelPosition + 1);
    bool IsHead = !Left ;
    //bool IsTail = !Right;

    bool LeftInvert = (CurrentGroupPixelPosition > 0) && (TargetPixelPosition > 1) && !LoadVisibility(CurrentGroupPixelPosition - 1);
    bool IsHeadUnvisible = !LeftInvert;

    bool ShowVisible = IsVisible && IsHead && NeedShowVisible;
    bool ShowUnvisible = !IsVisible && IsHeadUnvisible && NeedShowUnvisible;

    bool Show = ShowVisible || ShowUnvisible;
    if (ValidPoint)
    {
        uint MaxSearchLength = max(0, TargetSegment.PixelLengthShrink - TargetPixelPositionShrink);//计算shrink后的剩余像素，保证最近的可见点在TargetSegment范围内
        int2 BitIndex = IsVisible ? ExtractLatestZeroBit(CurrentGroupPixelPosition, MaxSearchLength) : ExtractLatestOneBit(CurrentGroupPixelPosition, MaxSearchLength);
        int TailIndex = BitIndex.x - BitIndex.y;

        float2 Head = CurrentPoint.xy;
        float4 Tail = LoadPoint(TailIndex);
        uint4 ExtraData = LoadExtra(TailIndex);
        uint TailTargetPixelPosition = ExtraData.x;
        uint TailGroupPixelPosition = ExtraData.y;
        bool TailIsValidPoint = Tail.x >= -1.0f;

        //bool HeadIsSliceHead = CurrentGroupPixelPosition == 0;
        //bool TailIsSliceTail = TailGroupPixelPosition == (VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM - 1);
        //bool HeadIsSliceHeadButNotSegmentHead = CurrentGroupPixelPosition == 0 && TargetPixelPosition > 1;
        //bool TailIsSliceTailButNotSegmentTail = TailGroupPixelPosition == (VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM - 1) && TailTargetPixelPosition < TargetSegment.PixelLength;

        if (Show && TailIsValidPoint) {
            ///////////////////////////////////////////
            Segment NewLine = (Segment)0;

            NewLine.NDCPosition[0] = Head.xy;
            NewLine.NDCPosition[1] = Tail.zw;

#if ENABLE_DEBUG_VIEW
            float4 TailDebugPosEnd = LoadDebugPos(TailIndex);
            NewLine.NDCPositionForDebug[0] = DebugPosStart;
            NewLine.NDCPositionForDebug[1] = TailDebugPosEnd;
#endif

            NewLine.PixelPosition[0] = float(TargetPixelPosition + TargetSegment.ClippedPositionOffset - 1)* TargetSegment.InvPixelLengthBeforeClippedMinusOne;
            NewLine.PixelPosition[1] = float(TailTargetPixelPosition + TargetSegment.ClippedPositionOffset - 1)* TargetSegment.InvPixelLengthBeforeClippedMinusOne;

            NewLine.Type = SET_LINE_IS_VISIBLE(TargetSegment.Type, IsVisible);

            NewLine.SliceId = CurrentSliceIndex;
            /*
            NewLine.SliceId = SET_IS_SLICE_HEAD(NewLine.SliceId, HeadIsSliceHeadButNotSegmentHead);
            NewLine.SliceId = SET_IS_SLICE_TAIL(NewLine.SliceId, TailIsSliceTailButNotSegmentTail);
            */

            NewLine.SegmentMetaDataId = BeginSegmentID;

            uint AnchorType0 = (TargetPixelPosition <= 1) ? 1 : (CurrentGroupPixelPosition == 0 ? 2 : 0);
            uint AnchorType1 = (TailTargetPixelPosition >= TargetSegment.PixelLength) ? 1 : (TailGroupPixelPosition == (VISIBILITY_PASS_PER_THREAD_ELEMENT_NUM - 1) ? 2 : 0);

            NewLine.Anchor[0] = SET_ANCHOR_INDEX(0, TargetSegment.Anchor[0]);
            NewLine.Anchor[1] = SET_ANCHOR_INDEX(0, TargetSegment.Anchor[1]);
            NewLine.Anchor[0] = SET_ANCHOR_TYPE(NewLine.Anchor[0], AnchorType0);
            NewLine.Anchor[1] = SET_ANCHOR_TYPE(NewLine.Anchor[1], AnchorType1);


            NewLine.MeshletData = TargetSegment.MeshletData;
            //////////////////////////////////////////

            uint Id = AddAllSegmentBuffer(NewLine);

#if !ENABLE_DEBUG_VIEW

            uint SegmentID = SET_ADJACENT_INDEX(0, Id);
            uint LineType = GET_LINE_TYPE(TargetSegment.Type);
            uint Anchor0 = (AnchorType0 == 1) ? TargetSegment.Anchor[0] : (AnchorType0 == 2 ? CurrentSliceIndex : 0xffffffff);
            uint Anchor1 = (AnchorType1 == 1) ? TargetSegment.Anchor[1] : (AnchorType1 == 2 ? (CurrentSliceIndex + 1) : 0xffffffff);
            //if (TargetPixelPosition <= 1) {
                SegmentID = SET_ADJACENT_DIRECTION(SegmentID, 0);
                WriteSegmentIndexToAnchorCache(AnchorType0, Anchor0, LineType, SegmentID);
            //}
            //if (TailTargetPixelPosition >= TargetSegment.PixelLength) {
                SegmentID = SET_ADJACENT_DIRECTION(SegmentID, 1);
                WriteSegmentIndexToAnchorCache(AnchorType1, Anchor1, LineType, SegmentID);
            //}

#endif
            /*
            SliceMetaData NewSliceMeta = (SliceMetaData)0;
            NewSliceMeta.Type = NewLine.Type;
            NewSliceMeta.SegmentMetaDataId = NewLine.SegmentMetaDataId;
            NewSliceMeta.Anchor = NewLine.Anchor[1];
            NewSliceMeta.SegmentId = Id;
            NewSliceMeta.SliceId = NewLine.SliceId;
            NewSliceMeta.NDCPosition = NewLine.NDCPosition[1].xy;
            NewSliceMeta.PixelPosition = NewLine.PixelPosition[1];
#if ENABLE_DEBUG_VIEW
            NewSliceMeta.DebugPosition = NewLine.NDCPositionForDebug[1];
#endif
            if (HeadIsSliceHeadButNotSegmentHead) {
                SliceBuffer[CurrentSliceIndex].HeadTailSegment[0] = NewSliceMeta;
            }
            if (TailIsSliceTailButNotSegmentTail) {
                SliceBuffer[CurrentSliceIndex].HeadTailSegment[1] = NewSliceMeta;
            }*/
        }
    }





    /*
    bool vis = LoadVisibility(CurrentGroupPixelPosition);
    float4 p = LoadPoint(CurrentGroupPixelPosition);
    if (p.x > -1.0f) {
        Segment NewLine = (Segment)0;
        NewLine.NDCPosition[0] = NDCPosition1;// p.xy;
        NewLine.NDCPosition[1] = NDCPosition2;// float2(p.xy + normalize(NDCPosition2 - NDCPosition1) * 0.001);
        // if (IsTail) NewLine.NDCPosition[1] = float3(p.xy + normalize(NDCPosition1 - NDCPosition2) * 0.011, p.z);
        // else if (IsHead) NewLine.NDCPosition[1] = float3(p.xy + normalize(NDCPosition2 - NDCPosition1) * 0.011, p.z);
        //NewLine.BackFacing = CurrentSlice.BeginPixel;
        //NewLine.debug = CurrentSlice.BeginSegmentIndex;
        //NewLine.debug2 = TargetSegment.PixelLength;
        //NewLine.SliceIndex = CurrentSliceIndex;// CurrentGroupPixelPosition;//gid.x;
        //if (CurrentGroupPixelPosition % 2 == 0 && IsVisible)
        NewLine.PixelLength = CalculatePixelLength(NewLine.NDCPosition[0], NewLine.NDCPosition[1], ScreenScaledResolution.xy).x;

       // if (NewLine.PixelLength < 5)
            AddAllSegmentBuffer(NewLine);
    }*/
    
}
