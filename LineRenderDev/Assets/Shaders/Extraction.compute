// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Extraction

#include "Common.cginc"

StructuredBuffer<AdjVertex> Vertices;
StructuredBuffer<AdjFace> AdjacencyTriangles;

RWStructuredBuffer<uint> SegmentArgBuffer;
RWStructuredBuffer<LineSegment> Segments;
AppendStructuredBuffer<VisibleLineSegment> VisibleSegments;
RWStructuredBuffer<RunTimeVertexState> RunTimeVertexBuffer;

uniform float3 LocalSpaceViewPosition;
uniform float CreaseAngleThreshold;
uniform float4  ScreenScaledResolution;

#pragma multi_compile_local __ ENABLE_DEBUG_CLIPPING
#include "Clipping.cginc"


#define DEBUG_CLIPPING 0


float3 ComputeNormal(float3 p1, float3 p2, float3 p3)
{
    float3 U = p2 - p1;
    float3 V = p3 - p1;

    float3 Normal = float3(0.0f, 0.0f, 0.0f);
    /*
    Normal.x = U.y * V.z - U.z * V.y;
    Normal.y = U.z * V.x - U.x * V.z;
    Normal.z = U.x * V.y - U.y * V.x;
    */
    Normal = cross(U, V);
    // No need to normalize
    Normal = normalize(Normal);

    return Normal;
}


#define BACK_FACE_THRESHOLD 0.000000001
inline bool IsSilhouette(float DotFactor1, float DotFactor2)
{
    return step(DotFactor1 * DotFactor2, BACK_FACE_THRESHOLD);
}

inline bool IsCrease(float3 Face1Normal, float3 Face2Normal, float AngleThreshold)
{
    /// a dot b / (|a| * |b|) <= cos(theta)
    return step(dot(Face1Normal, Face2Normal) / length(Face2Normal), AngleThreshold);

}


uint2 CalculatePixelLength(float2 UnifyNDCPosition1, float2 UnifyNDCPosition2)
{
    float ScreenWidth = ScreenScaledResolution.x;
    float ScreenHeight = ScreenScaledResolution.y;

    float2 PixelPos1 = float2(UnifyNDCPosition1.x * ScreenWidth, UnifyNDCPosition1.y * ScreenHeight);
    float2 PixelPos2 = float2(UnifyNDCPosition2.x * ScreenWidth, UnifyNDCPosition2.y * ScreenHeight);

    float PixelLength = ceil(length(PixelPos2 - PixelPos1));
    float ShrinkPixelLength = PixelLength > 2.0 ? (1.0 + floor(PixelLength * 0.5)) : PixelLength;

    return uint2((uint)PixelLength, (uint)(ShrinkPixelLength));
}


int ArgBufferCounting(bool Visible)
{
    int Original = 0;
    InterlockedAdd(SegmentArgBuffer[0], Visible ? 1 : 0, Original);

    if((uint)(Original + 1) % SLICE_PASS_PER_THREAD_ELEMENT_NUM == 0)
        InterlockedAdd(SegmentArgBuffer[1], Visible ? 1 : 0, Original);

    InterlockedAdd(SegmentArgBuffer[4], 1, Original);
    int Id = Original;
    return Id;
}




void SyncAdjacency(uint VertexIndex, int LineId)
{
    // Sync adjacency for chainning pass
    uint RunTimeIndex = VertexIndex;

    // Add adj num
    uint Original = 0;
    InterlockedAdd(RunTimeVertexBuffer[RunTimeIndex].AdjNum, 1, Original);

    if (Original <= 2) {
        Original = -1;
        InterlockedCompareExchange(RunTimeVertexBuffer[RunTimeIndex].Left, -1, LineId, Original);
        if (Original != -1)
            InterlockedCompareExchange(RunTimeVertexBuffer[RunTimeIndex].Right, -1, LineId, Original);
    }

}


void ExtractEdge(float3 V0, float3 V1, uint2 Index, 
    uint2 MeshletIndex, 
    float3 CurrentFaceNormal, float3 AdjFaceNormal, float3 LocalViewVector, float CreasePremultiplyAngleThreshold)
{
    bool Add = false;

    bool NeedExtractSilhouette = SilhouetteEnable > 0;
    bool NeedExtractCrease = CreaseEnable > 0;

    float DotFactorCurrentFace = dot(CurrentFaceNormal, LocalViewVector);
    float DotFactorAdjFace = dot(AdjFaceNormal, LocalViewVector);

    Add = Add || (NeedExtractSilhouette && IsSilhouette(DotFactorCurrentFace, DotFactorAdjFace));
    Add = Add || (NeedExtractCrease && IsCrease(CurrentFaceNormal, AdjFaceNormal, CreasePremultiplyAngleThreshold));

    bool CurrentIsBackFace = step(DotFactorCurrentFace, BACK_FACE_THRESHOLD);
    bool AdjIsBackFace = step(DotFactorAdjFace, BACK_FACE_THRESHOLD);
    bool BackFacing = CurrentIsBackFace && AdjIsBackFace;

    float4 ClipPos0BeforeClip = CalculateClipSpacePosition(V0);
    float4 ClipPos1BeforeClip = CalculateClipSpacePosition(V1);
    float4 Pos0ForClipping = ClipPos0BeforeClip;
    float4 Pos1ForClipping = ClipPos1BeforeClip;
#if DEBUG_CLIPPING
    Pos0ForClipping = CalculateClipSpacePositionForClipping(V0);
    Pos1ForClipping = CalculateClipSpacePositionForClipping(V1);
#endif

    float3 ClipState = PreClipping(Pos0ForClipping, Pos1ForClipping);
    float4 ClipPos0 = ClampPosition(float4(ClipPos0BeforeClip + ClipState.y * (ClipPos1BeforeClip - ClipPos0BeforeClip)));
    float4 ClipPos1 = ClampPosition(float4(ClipPos0BeforeClip + ClipState.z * (ClipPos1BeforeClip - ClipPos0BeforeClip)));

    bool UnClipped = ClipState.x >= 0.0f;
    if (Add)
    {
        float4 NDCPos0 = CalculateNDCPosition(ClipPos0);
        float4 NDCPos1 = CalculateNDCPosition(ClipPos1);
        NDCPos0 = UnifyNDCPosition(NDCPos0);
        NDCPos1 = UnifyNDCPosition(NDCPos1);

        LineSegment Line = (LineSegment)0;

        Line.NDCPosition[0] = float4(NDCPos0.xy, ClipPos0.zw);
        Line.NDCPosition[1] = float4(NDCPos1.xy, ClipPos1.zw);

        Line.BackFacing = BackFacing ? 1 : 0;

        //uint4 VertexIndex = CheckVertexIndex(uint2(V1, V2), ClipState);
        Line.RunTimeVertexIndex[0] = Index.x;
        Line.RunTimeVertexIndex[1] = Index.y;

        Line.Direction = normalize(NDCPos1.xy - NDCPos0.xy);

        Line.MeshletIndex[0] = MeshletIndex.x;
        Line.MeshletIndex[1] = MeshletIndex.y;

        Line.Id = ArgBufferCounting(UnClipped);
        Segments[Line.Id] = Line;

        if (UnClipped) {

            VisibleLineSegment VisibleLine = (VisibleLineSegment)0;
            uint2 PixelLength = CalculatePixelLength(Line.NDCPosition[0].xy, Line.NDCPosition[1].xy);
            VisibleLine.PixelLength = PixelLength.x;
            VisibleLine.PixelLengthShrink = PixelLength.y;
            VisibleLine.PixelLengthShrinkTotal = 0;

            float2 NDC0XYBeforeClip = UnifyNDCPositionXY(CalculateNDCPositionXY(ClipPos0BeforeClip));
            float2 NDC1XYBeforeClip = UnifyNDCPositionXY(CalculateNDCPositionXY(ClipPos1BeforeClip));
            VisibleLine.InvPixelLengthBeforeClippedMinusOne = 1.0f / float(CalculatePixelLength(NDC0XYBeforeClip, NDC1XYBeforeClip).x - 1.0f);
            VisibleLine.ClippedPositionOffset = CalculatePixelLength(NDC0XYBeforeClip, Line.NDCPosition[0].xy).x;
            VisibleLine.Id = Line.Id;
            VisibleSegments.Append(VisibleLine);

        }

        SyncAdjacency(Index.x, Line.Id);
        SyncAdjacency(Index.y, Line.Id);
    }

}


//[numthreads(EXTRACT_PASS_PER_THREAD_ELEMENT_NUM, 1, 1)]
//void Extraction (uint3 id : SV_DispatchThreadID)
//{
//    if (id.x >= TotalAdjacencyTrianglesNum) return;
//
//    AdjFace CurrentFace = AdjacencyTriangles[id.x];
//
//
//    float3 VertexX = Vertices[CurrentFace.x].v;
//    float3 VertexY = Vertices[CurrentFace.y].v;
//    float3 VertexZ = Vertices[CurrentFace.z].v;
//
//    bool AddXY = false;
//    bool AddYZ = false;
//    bool AddZX = false;
//
//    float3 CurrentFaceNormal = ComputeNormal(VertexX, VertexY, VertexZ);
//    float CreasePremultiplyAngleThreshold = length(CurrentFaceNormal) * (cos(CreaseAngleThreshold) + 0.000001f); //+1.0e-6 for Epsilon
//
//    if (CurrentFace.xy >= 1)
//    {
//        float3 AdjVertexXY = Vertices[CurrentFace.xy - 1].v;
//        float3 AdjFaceXYNormal = ComputeNormal(VertexY, VertexX, AdjVertexXY);
//        float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (VertexX + VertexY) * 0.5f);
//
//        ExtractEdge(VertexX, VertexY, uint2(CurrentFace.x, CurrentFace.y), 
//            uint2(CurrentFace.xyLayer1, CurrentFace.xyLayer2), 
//            CurrentFaceNormal, AdjFaceXYNormal, LocalViewVector, CreasePremultiplyAngleThreshold);
//    }
//
//    if (CurrentFace.zx >= 1)
//    {
//        float3 AdjVertexZX = Vertices[CurrentFace.zx - 1].v;
//        float3 AdjFaceZXNormal = ComputeNormal(VertexZ, AdjVertexZX, VertexX);
//        float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (VertexX + VertexZ) * 0.5f);
//
//        ExtractEdge(VertexZ, VertexX, uint2(CurrentFace.z, CurrentFace.x),
//            uint2(CurrentFace.zxLayer1, CurrentFace.zxLayer2), 
//            CurrentFaceNormal, AdjFaceZXNormal, LocalViewVector, CreasePremultiplyAngleThreshold);
//    }
//
//    if (CurrentFace.yz >= 1)
//    {
//        float3 AdjVertexYZ = Vertices[CurrentFace.yz - 1].v;
//        float3 AdjFaceYZNormal = ComputeNormal(AdjVertexYZ, VertexZ, VertexY);
//        float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (VertexY + VertexZ) * 0.5f);
//
//        ExtractEdge(VertexY, VertexZ, uint2(CurrentFace.y, CurrentFace.z),
//            uint2(CurrentFace.yzLayer1, CurrentFace.yzLayer2), 
//            CurrentFaceNormal, AdjFaceYZNormal, LocalViewVector, CreasePremultiplyAngleThreshold);
//    }
//
//
//}



StructuredBuffer<EXPORTVertex> VertexBuffer;
StructuredBuffer<EXPORTFace> FaceBuffer;
StructuredBuffer<EXPORTMeshlet> MeshletBuffer;

RWStructuredBuffer<uint> WArgBuffer;
RWStructuredBuffer<ContourFace> ContourFaceBuffer;
RWStructuredBuffer<Segment> SegmentBuffer;

void AddSegmentBuffer(Segment CurrentSegment)
{
    uint Original = 0;
    InterlockedAdd(WArgBuffer[INDIRECT_DRAW_TRIANGLE_COUNT], 1, Original);
    SegmentBuffer[Original] = CurrentSegment;

}

void AddContourFaceBuffer(bool Add, Face CurrentFace, bool V0Test, bool V1Test, bool V2Test)
{
    uint Original = 0;
    InterlockedAdd(WArgBuffer[CONTOURIZE_PASS_FACE_COUNT], Add ? 1 : 0, Original);
    uint Original2 = 0;
    bool AddThreadCount = ((Original + 1) % CONTOURIZE_PASS_PER_THREAD_ELEMENT_NUM == 0);
    InterlockedAdd(WArgBuffer[CONTOURIZE_PASS_START], AddThreadCount && Add ? 1 : 0, Original2);

    if (Add) {
        ContourFace NewFace = (ContourFace)0;

        NewFace.v0 = CurrentFace.v0 | (V0Test ? 0x80000000 : 0x0);
        NewFace.v1 = CurrentFace.v1 | (V1Test ? 0x80000000 : 0x0);
        NewFace.v2 = CurrentFace.v2 | (V2Test ? 0x80000000 : 0x0);
        NewFace.V0Normal = CurrentFace.V0Normal;
        NewFace.V1Normal = CurrentFace.V1Normal;
        NewFace.V2Normal = CurrentFace.V2Normal;

        ContourFaceBuffer[Original] = NewFace;
    }
}

[numthreads(EXTRACT_PASS_PER_THREAD_ELEMENT_NUM, 1, 1)]
void Extraction(uint3 gid : SV_GroupID, uint gindex : SV_GroupIndex, uint3 tid : SV_DispatchThreadID)
{
    EXPORTMeshlet CurrentMeshlet = MeshletBuffer[gid.x];
    if (gid.x >= TotalMeshletsNum) return;

    uint FaceId = CurrentMeshlet.FaceOffset + gindex;
    if (gindex >= CurrentMeshlet.FaceNum) return;

    EXPORTFace CurrentFaceData = FaceBuffer[FaceId];
    Face CurrentFace = DecodeFaceData(CurrentMeshlet, CurrentFaceData);

    uint V0Id = CurrentFace.v0;
    uint V1Id = CurrentFace.v1;
    uint V2Id = CurrentFace.v2;

    EXPORTVertex V0 = VertexBuffer[V0Id];
    EXPORTVertex V1 = VertexBuffer[V1Id];
    EXPORTVertex V2 = VertexBuffer[V2Id];


    bool IsHardFace = ((CurrentFace.e01h ? 1 : 0) + (CurrentFace.e12h ? 1 : 0) + (CurrentFace.e20h ? 1 : 0)) >= 1;
    if (IsHardFace)
    {
        if (CurrentFace.e01h && CurrentFace.e01u && CurrentFace.adjFace01 >= 0)
        {
            EXPORTFace AdjFaceData = FaceBuffer[CurrentFace.adjFace01];
            float3 AdjFaceNormal = GetFaceNormal(AdjFaceData);
            float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (V0.Position + V1.Position) * 0.5f);

            float DotFactorCurrentFace = dot(CurrentFace.Normal, LocalViewVector);
            float DotFactorAdjFace = dot(AdjFaceNormal, LocalViewVector);

            if (IsSilhouette(DotFactorCurrentFace, DotFactorAdjFace)) {
                //temp
                Segment NewLine = (Segment)0;
                ToSegmentLine(V0.Position, V1.Position, NewLine);
                NewLine.Color = float4(0.0, 0.0, 1.0f, 0.0f);

                AddSegmentBuffer(NewLine);
            }
        }

        if (CurrentFace.e12h && CurrentFace.e12u && CurrentFace.adjFace12 >= 0)
        {
            EXPORTFace AdjFaceData = FaceBuffer[CurrentFace.adjFace12];
            float3 AdjFaceNormal = GetFaceNormal(AdjFaceData);
            float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (V1.Position + V2.Position) * 0.5f);

            float DotFactorCurrentFace = dot(CurrentFace.Normal, LocalViewVector);
            float DotFactorAdjFace = dot(AdjFaceNormal, LocalViewVector);

            if (IsSilhouette(DotFactorCurrentFace, DotFactorAdjFace)) {
                //temp
                Segment NewLine = (Segment)0;
                ToSegmentLine(V1.Position, V2.Position, NewLine);
                NewLine.Color = float4(0.0, 0.0, 1.0f, 0.0f);

                AddSegmentBuffer(NewLine);
            }
        }

        if (CurrentFace.e20h && CurrentFace.e20u && CurrentFace.adjFace20 >= 0)
        {
            EXPORTFace AdjFaceData = FaceBuffer[CurrentFace.adjFace20];
            float3 AdjFaceNormal = GetFaceNormal(AdjFaceData);
            float3 LocalViewVector = normalize(LocalSpaceViewPosition.xyz - (V2.Position + V0.Position) * 0.5f);

            float DotFactorCurrentFace = dot(CurrentFace.Normal, LocalViewVector);
            float DotFactorAdjFace = dot(AdjFaceNormal, LocalViewVector);

            if (IsSilhouette(DotFactorCurrentFace, DotFactorAdjFace)) {
                //temp
                Segment NewLine = (Segment)0;
                ToSegmentLine(V2.Position, V0.Position, NewLine);
                NewLine.Color = float4(0.0, 0.0, 1.0f, 0.0f);

                AddSegmentBuffer(NewLine);
            }
        }
    }
    else {
        float ViewV0 = dot(CurrentFace.V0Normal, LocalSpaceViewPosition.xyz - V0.Position);
        float ViewV1 = dot(CurrentFace.V1Normal, LocalSpaceViewPosition.xyz - V1.Position);
        float ViewV2 = dot(CurrentFace.V2Normal, LocalSpaceViewPosition.xyz - V2.Position);

        bool BackFace = ViewV0 < 0.0f && ViewV1 < 0.0f && ViewV2 < 0.0f;
        bool FrontFace = ViewV0 > 0.0f && ViewV1 > 0.0f && ViewV2 > 0.0f;
        bool IsContourFace = !(BackFace || FrontFace);

        AddContourFaceBuffer(IsContourFace, CurrentFace, ViewV0 < 0.0f, ViewV1 < 0.0f, ViewV2 < 0.0f);
    }

}
