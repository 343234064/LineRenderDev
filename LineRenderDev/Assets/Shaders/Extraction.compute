// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Extraction

#pragma multi_compile __ ENABLE_DEBUG_VIEW
#include "Common.cginc"



StructuredBuffer<EXPORTVertex> VertexBuffer;
StructuredBuffer<EXPORTFace> FaceBuffer;
StructuredBuffer<EXPORTMeshlet> MeshletBuffer;

RWStructuredBuffer<uint> WArgBuffer;
RWStructuredBuffer<Contour> ContourBuffer;
RWStructuredBuffer<AnchorVertex> AnchorVertexBuffer;
RWStructuredBuffer<AnchorEdge> AnchorEdgeBuffer;

uniform float3 LocalSpaceViewPosition;
uniform float3 LocalSpaceViewForward;
uniform float CreaseAngleThreshold;




#define BACK_FACE_THRESHOLD 0.000000001
inline bool IsSilhouette(float DotFactor1, float DotFactor2)
{
    return step(DotFactor1 * DotFactor2, BACK_FACE_THRESHOLD);
}

inline bool IsCrease(float3 Face1Normal, float3 Face2Normal, float AngleThreshold)
{
    /// a dot b / (|a| * |b|) <= cos(theta)
    return step(dot(Face1Normal, Face2Normal), AngleThreshold);

}


void ResetAnchorVertexBuffer(uint Index)
{
    AnchorVertex NewAnchor;
    NewAnchor.CreaseType = uint3(0, 0xffffffff, 0xffffffff);
    NewAnchor.ContourType = uint3(0, 0xffffffff, 0xffffffff);

    AnchorVertexBuffer[Index] = NewAnchor;
}

void ResetAnchorEdgeBuffer(uint Index)
{
    AnchorEdge NewAnchor;
    NewAnchor.ContourType = uint3(0, 0xffffffff, 0xffffffff);

    AnchorEdgeBuffer[Index] = NewAnchor;
}



uint AddContourBuffer(Contour Current)
{
    uint Original = 0;
    InterlockedAdd(WArgBuffer[CONTOURIZE_PASS_CONTOUR_COUNT], 1, Original);
    uint Original2 = 0;
    bool AddThreadCount = ((Original + 1) % CONTOURIZE_PASS_PER_THREAD_ELEMENT_NUM == 0);
    InterlockedAdd(WArgBuffer[CONTOURIZE_PASS_DISPATCH_COUNT], AddThreadCount ? 1 : 0, Original2);

    ContourBuffer[Original] = Current;

    return Original;
}


struct ExtractResult
{
    bool ExtractContour;
    bool ExtractCrease;
    bool ExtractBorder;
    bool BackFacing;
};


bool GetExtractResult(in uint AdjFaceIndex, in float3 CurrentFaceNormal, in float3 VA, in float3 VB, in float CreasePremultiplyAngleThreshold, 
    in bool ExtractContour, in bool ExtractCrease, 
    inout ExtractResult Result)
{
    EXPORTFace AdjFaceData = FaceBuffer[AdjFaceIndex];
    float3 AdjFaceNormal = GetFaceNormal(AdjFaceData);
    float3 LocalViewVector = (LocalSpaceViewPosition.xyz - (VA + VB) * 0.5f);/*no normalize*/
    float DotFactorCurrentFace = dot(CurrentFaceNormal, LocalViewVector);
    float DotFactorAdjFace = dot(AdjFaceNormal, LocalViewVector);
    Result.BackFacing = DotFactorCurrentFace < 0.0f && DotFactorAdjFace < 0.0f;

    if (ExtractContour) {
        Result.ExtractContour = IsSilhouette(DotFactorCurrentFace, DotFactorAdjFace);
    }

    if (ExtractCrease) {
        Result.ExtractCrease = IsCrease(CurrentFaceNormal, AdjFaceNormal, CreasePremultiplyAngleThreshold);
    }

    return Result.ExtractContour | Result.ExtractCrease | Result.ExtractBorder;
}




[numthreads(EXTRACT_PASS_PER_THREAD_ELEMENT_NUM, 1, 1)]
void Extraction(uint3 gid : SV_GroupID, uint gindex : SV_GroupIndex, uint3 tid : SV_DispatchThreadID)
{
    EXPORTMeshlet CurrentMeshlet = MeshletBuffer[gid.x];
    if (gid.x >= TotalMeshletsNum) return;

    uint FaceId = CurrentMeshlet.FaceOffset + gindex;
    bool Valid = true;
    if (gindex >= CurrentMeshlet.FaceNum) Valid = false;

    EXPORTFace CurrentFaceData = FaceBuffer[FaceId];
    Face CurrentFace = DecodeFaceData(CurrentFaceData);

    uint V0Id = CurrentMeshlet.VertexOffset + CurrentFace.v0Offset;
    uint V1Id = CurrentMeshlet.VertexOffset + CurrentFace.v1Offset;
    uint V2Id = CurrentMeshlet.VertexOffset + CurrentFace.v2Offset;

    EXPORTVertex V0 = VertexBuffer[V0Id];
    EXPORTVertex V1 = VertexBuffer[V1Id];
    EXPORTVertex V2 = VertexBuffer[V2Id];

    bool IsHardFace = ((CurrentFace.e01h ? 1 : 0) + (CurrentFace.e12h ? 1 : 0) + (CurrentFace.e20h ? 1 : 0)) >= 1;

    bool CanExtractE01 = CurrentFace.e01u && CurrentFace.adjFace01 >= 0 && Valid;
    bool CanExtractE12 = CurrentFace.e12u && CurrentFace.adjFace12 >= 0 && Valid;
    bool CanExtractE20 = CurrentFace.e20u && CurrentFace.adjFace20 >= 0 && Valid;

    bool NeedExtractContour = ContourEnable > 0;
    bool NeedExtractCrease = CreaseEnable > 0;

    float CreasePremultiplyAngleThreshold = (cos(CreaseAngleThreshold) + 0.00005f);//+5.0e-5 for Epsilon

    bool ExtractAnchorV0 = false;
    bool ExtractAnchorV1 = false;
    bool ExtractAnchorV2 = false;


    ExtractResult Result01 = (ExtractResult)0;
    if (CanExtractE01)
    {
        if (GetExtractResult(CurrentFace.adjFace01, CurrentFace.Normal, V0.Position, V1.Position, CreasePremultiplyAngleThreshold, NeedExtractContour && IsHardFace && CurrentFace.e01h, NeedExtractCrease, Result01))
        {
            Contour NewEdge = (Contour)0;
            NewEdge.V0Data = V0.Position;
            NewEdge.V1Data = V1.Position;
            NewEdge.Anchor[0] = V0.UniqueIndex;
            NewEdge.Anchor[1] = V1.UniqueIndex;
            // NewEdge must be unique edge
            NewEdge.MeshletData[0] = CurrentFace.MeshletData.x;
            NewEdge.MeshletData[1] = CurrentFace.MeshletData.y;

            if (Result01.ExtractContour)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CONTOUR_EDGE_TYPE);
                AddContourBuffer(NewEdge);
            }
            if (Result01.ExtractCrease)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CREASE_EDGE_TYPE);
                NewEdge.Type = SET_LINE_IS_BACKFACING(NewEdge.Type, Result01.BackFacing);
                AddContourBuffer(NewEdge);
            }

            ExtractAnchorV0 = true;
            ExtractAnchorV1 = true;
        }
    }

    ExtractResult Result12 = (ExtractResult)0;
    if (CanExtractE12)
    {
        if (GetExtractResult(CurrentFace.adjFace12, CurrentFace.Normal, V1.Position, V2.Position, CreasePremultiplyAngleThreshold, NeedExtractContour && IsHardFace && CurrentFace.e12h, NeedExtractCrease, Result12))
        {
            Contour NewEdge = (Contour)0;
            NewEdge.V0Data = V1.Position;
            NewEdge.V1Data = V2.Position;
            NewEdge.Anchor[0] = V1.UniqueIndex;
            NewEdge.Anchor[1] = V2.UniqueIndex;
            // NewEdge must be unique edge
            NewEdge.MeshletData[0] = CurrentFace.MeshletData.x;
            NewEdge.MeshletData[1] = CurrentFace.MeshletData.y;

            if (Result12.ExtractContour)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CONTOUR_EDGE_TYPE);;
                AddContourBuffer(NewEdge);
            }
            if (Result12.ExtractCrease)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CREASE_EDGE_TYPE); 
                NewEdge.Type = SET_LINE_IS_BACKFACING(NewEdge.Type, Result12.BackFacing);
                AddContourBuffer(NewEdge);
            }

            ExtractAnchorV1 = true;
            ExtractAnchorV2 = true;
        }
    }

    ExtractResult Result20 = (ExtractResult)0;
    if (CanExtractE20)
    {
        if (GetExtractResult(CurrentFace.adjFace20, CurrentFace.Normal, V2.Position, V0.Position, CreasePremultiplyAngleThreshold, NeedExtractContour && IsHardFace && CurrentFace.e20h, NeedExtractCrease, Result20))
        {
            Contour NewEdge = (Contour)0;
            NewEdge.V0Data = V2.Position;
            NewEdge.V1Data = V0.Position;
            NewEdge.Anchor[0] = V2.UniqueIndex;
            NewEdge.Anchor[1] = V0.UniqueIndex;
            // NewEdge must be unique edge
            NewEdge.MeshletData[0] = CurrentFace.MeshletData.x;
            NewEdge.MeshletData[1] = CurrentFace.MeshletData.y;

            if (Result20.ExtractContour)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CONTOUR_EDGE_TYPE);
                AddContourBuffer(NewEdge);
            }
            if (Result20.ExtractCrease)
            {
                NewEdge.Type = SET_LINE_TYPE(0, CREASE_EDGE_TYPE);
                NewEdge.Type = SET_LINE_IS_BACKFACING(NewEdge.Type, Result20.BackFacing);
                AddContourBuffer(NewEdge);
            }

            ExtractAnchorV2 = true;
            ExtractAnchorV0 = true;
        }
    }


    if(!IsHardFace && NeedExtractContour && Valid)
    {
        float ViewV0 = dot(CurrentFace.V0Normal, LocalSpaceViewPosition.xyz - V0.Position);
        float ViewV1 = dot(CurrentFace.V1Normal, LocalSpaceViewPosition.xyz - V1.Position);
        float ViewV2 = dot(CurrentFace.V2Normal, LocalSpaceViewPosition.xyz - V2.Position);
        bool V0Vis = ViewV0 > 0.0f;
        bool V1Vis = ViewV1 > 0.0f;
        bool V2Vis = ViewV2 > 0.0f;
        bool BackFace = !V0Vis && !V1Vis && !V2Vis;
        bool FrontFace = V0Vis && V1Vis && V2Vis;
        bool IsContourFace = !(BackFace || FrontFace);


        if (IsContourFace) {
            Contour NewFace = (Contour)0;
            NewFace.Type = SET_LINE_TYPE(0, CONTOUR_FACE_TYPE);
            NewFace.v0 = V0Id | (!V0Vis ? 0x80000000 : 0x0);
            NewFace.v1 = V1Id | (!V1Vis ? 0x80000000 : 0x0);
            NewFace.v2 = V2Id | (!V2Vis ? 0x80000000 : 0x0);
            NewFace.V0Data = CurrentFace.V0Normal;
            NewFace.V1Data = CurrentFace.V1Normal;
            NewFace.V2Data = CurrentFace.V2Normal;
            NewFace.MeshletData[0] = CurrentFace.MeshletData.x;
            NewFace.MeshletData[1] = CurrentFace.MeshletData.y;

            if ((V2Vis && !V0Vis && !V1Vis) || (!V2Vis && V0Vis && V1Vis)) {
                ResetAnchorEdgeBuffer(CurrentFace.edge20);
                ResetAnchorEdgeBuffer(CurrentFace.edge12);
                NewFace.Anchor[0] = CurrentFace.edge20;
                NewFace.Anchor[1] = CurrentFace.edge12;
            }
            else if ((V0Vis && !V1Vis && !V2Vis) || (!V0Vis && V1Vis && V2Vis)) {
                ResetAnchorEdgeBuffer(CurrentFace.edge01);
                ResetAnchorEdgeBuffer(CurrentFace.edge20);
                NewFace.Anchor[0] = CurrentFace.edge01;
                NewFace.Anchor[1] = CurrentFace.edge20;
            }
            else if ((V1Vis && !V0Vis && !V2Vis) || (!V1Vis && V0Vis && V2Vis)) {
                ResetAnchorEdgeBuffer(CurrentFace.edge01);
                ResetAnchorEdgeBuffer(CurrentFace.edge12);
                NewFace.Anchor[0] = CurrentFace.edge01;
                NewFace.Anchor[1] = CurrentFace.edge12;
            }

            AddContourBuffer(NewFace);

        }
    }

    if (ExtractAnchorV0) ResetAnchorVertexBuffer(V0.UniqueIndex);
    if (ExtractAnchorV1) ResetAnchorVertexBuffer(V1.UniqueIndex);
    if (ExtractAnchorV2) ResetAnchorVertexBuffer(V2.UniqueIndex);

}
